from pyspark.sql import SparkSession
from pyspark.sql.functions import split, col

# Initialize Spark session
spark = SparkSession.builder.appName("MyApp").getOrCreate()

# Read the CSV file with a custom delimiter
df = spark.read.format("csv").option("header", "true").option("inferSchema", "true").option("delimiter", ",").load("D:/data/employees.csv")

'''
#output:
+-----+----------------------+
|empid|fname|lname@sal#deptid|
+-----+----------------------+
|    1|  mohan|kumar@5000#100|
|    2|  karna|varadan@348...|
|    3|  kavitha|gandan@60...|
+-----+----------------------+

#split:
split(str, pattern, limit=-1)

str: The string column to be split.
pattern: The delimiter or pattern used to split the string.
limit: (Optional) An integer that specifies the maximum number of splits. 
If not specified, the default is -1, which means there is no limit on the number of splits.

#getItem():
The getItem() function in PySpark is used to extract a specific element from an array or a specific field from a struct in a DataFrame column. 
It is often used in conjunction with functions like split to extract individual elements after splitting a string column.

#syntax:
col("column_name").getItem(index)

column_name: The name of the column containing an array or struct.
index: The position of the element in the array (0-based index) or the name of the field in a struct.
'''

# Split the 'fname|lname@sal#deptid' column into individual columns             
exp_op = df.withColumn("fname", split(col("fname|lname@sal#deptid"), "\\|").getItem(0)) \
            .withColumn("lname", split(split(col("fname|lname@sal#deptid"), "\\|").getItem(1),"@").getItem(0)) \
            .withColumn("sal", split(split(col("fname|lname@sal#deptid"), "@").getItem(1), "#").getItem(0)) \
            .withColumn("deptid", split(col("fname|lname@sal#deptid"), "#").getItem(1)) \
            .select("empid","fname", "lname", "sal", "deptid")
             
#note:In the context of the PySpark split function, the double backslash (\\) before the pipe character (|) is used to properly escape the pipe character in a regular expression.
